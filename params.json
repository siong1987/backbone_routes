{"name":"Backbone.Routes","body":"# Introduction\r\n\r\nYou want to have a central place to control all your routing logic for\r\nyour [Backbone][1] app. Then, Backbone.Routes is for you. This is a\r\nBackbone plugin that I created for my own use on one of the projects\r\nthat I am working on now.\r\n\r\n## Warnings\r\n\r\nThis plugin will replace some of the things that Backbone is\r\ndoing now.\r\n\r\nFor example:\r\n\r\n```coffeescript\r\nclass YourApp.Routers.UsersRouter extends Backbone.Router\r\n  routes:\r\n    \"/new\": \"new\"\r\n```\r\n\r\n`routes` will not longer working once you start using Backbone.Routes\r\nwith your Backbone app. So, what Backbone.Routes is useful for?\r\n\r\n## Installation\r\n\r\nTo install this, just load it after Backbone is loaded.\r\n\r\nFor example in Rails 3.1,\r\n\r\n```javascript\r\n//= require jquery\r\n//= require jquery_ujs\r\n//= require underscore\r\n//= require backbone\r\n//= require backbone_routes\r\n```\r\n\r\n## Features\r\n\r\nIn fact, if you want to have a central place to control all your routing\r\nlogic for Backbone. Backbone.Routes is a good plugin that you should\r\nuse.\r\n\r\nExample:\r\n\r\n```coffeescript\r\nBackbone.Routes.prefix = YourApp.Routers\r\n\r\n# Matches from top to bottom.\r\nBackbone.Routes.map\r\n  \"/\":\r\n    \"NavbarRouter\": \"index\"\r\n    \"HomeRouter\": \"index\"\r\n\r\n  \"/signin\":\r\n    \"NavbarRouter\": \"index\"\r\n    \"RegistrationRouter\": \"signin\"\r\n\r\n  \"/questions\":\r\n    \"NavbarRouter\": \"index\"\r\n    \"QuestionsRouter\": \"index\"\r\n    \"SidebarRouter\"  : \"new_questions\"\r\n\r\n  \"/:nick\":\r\n    \"NavbarRouter\": \"index\"\r\n    \"ProfilesRouter\" : \"index\"\r\n    \"SidebarRouter\"  : \"new_questions\"\r\n```\r\n\r\nSo, the first thing you have to set is the `prefix` for Backbone.Routes.\r\nThe default is `window`. So, how is it used by Backbone.Routes. If you\r\ntake a look at the first route: \"/\". There are `NavbarRouter` and\r\n`HomeRouter`. So, once you set the `prefix`, inside Backbone.Routes, it\r\nwill call:\r\n\r\n```coffeescript\r\nBackbone.Routes.prefix = YourApp.Routers\r\n\r\n# a safer way than actually calling eval()\r\n\r\n# The following code is equivalent to\r\n# new YourApp.Routers.NavbarRouter()\r\nnew Backbone.Routes.prefix[\"NavbarRouter\"]() # string to class\r\n\r\n# and\r\n\r\n# The following code is equivalent to\r\n# new YourApp.Routers.HomeRouter()\r\nnew Backbone.Routes.prefix[\"HomeRouter\"]() # string to class\r\n```\r\n\r\nSo, it also means that you don't have to initiate the Routers again\r\nanymore since Backbone.Routes will do the work for you.\r\n\r\nAnd, another cool thing about Backbone.Routes is that it matches routes\r\nfrom top to bottom. So, for the example above, only `/signin` will get\r\ncalled. On a traditional Backbone app, you will have to structure your\r\nBackbone app in the way that `/signin` is called before `/:nick` which\r\nis really annoying most of the time.\r\n\r\n## Concurrent Routers\r\n\r\nSo, you might want to ask, what the following code does?\r\n\r\n```coffeescript\r\n\"/\":\r\n  \"NavbarRouter\": \"index\"\r\n  \"HomeRouter\": \"index\"\r\n```\r\n\r\nYes, it is exactly what you think it is. Two routers get called when the\r\nroute `/` is hit. Why is this? I do this because I separated the logic\r\nfor the navigation bar and the realy homepage. So, my code can be more\r\nmodularized in the way that people who work on the navigation bar and\r\nthe people who work on the homepage do not have to step on the foot of\r\neach other.\r\n\r\nMore modularized code also means less commit conflicts and less points of\r\nfailure.\r\n\r\n## Caching\r\n\r\nBackbone.Routes supports caching too. For example, if you have code\r\nsimilar as:\r\n\r\n```coffeescript\r\n# Matches from top to bottom.\r\nBackbone.Routes.map\r\n  \"/\":\r\n    \"NavbarRouter\": \"index\"\r\n    \"HomeRouter\": \"index\"\r\n\r\n  \"/signin\":\r\n    \"NavbarRouter\": \"index\"\r\n    \"RegistrationRouter\": \"signin\"\r\n```\r\n\r\nYou notice that `NavbarRouter#index` is called at least two times. And, one\r\nthing is that `NavbarRouter#index` is static. The content of it doesn't\r\nchange. So, why should Backbone rerender it everytime?\r\n\r\nSo, to cache that particular action `NavbarRouter#index`, you can do:\r\n\r\n```coffeescript\r\nclass NavbarRouter extends Backbone.Router\r\n  cache: [\"index\"]\r\n\r\n  index: ->\r\n    # blah blah blah...\r\n```\r\n\r\nNotice the `cache` keyword here, it is used to cache the `index` action\r\nin this particular router `NavbarRouter`. Once you use the `cache`\r\nkeyword, `NavbarRouter#index` will only be loaded for the first time,\r\nany subsequent call to `NavbarRouter#index` will be cached.\r\n\r\nNotice that the caching only work for the subsequent call. If\r\n`NavbarRouter#index` isn't called for the subsequent call. It will be\r\npurged from the cache.\r\n\r\n## Help/Issues\r\n\r\nThe code is extremely simple. Just read the source code if you have any\r\nquestions. Or, you can create a GitHub issue, I will look at them as\r\nsoon as I have the time.\r\n\r\n## Contact\r\n\r\nLet me know if you want to talk to me about this plugin. You can email\r\nme siong(1900+87) (at) gmail (dot) com.\r\n\r\n## LICENSE\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2012 Teng Siong Ong\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n[1]: http://documentcloud.github.com/backbone/\r\n","tagline":"Rails like central routing control for Backbone.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}